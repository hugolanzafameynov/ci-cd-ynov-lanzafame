name: Deploy Frontend to GitHub Pages

on:
  push:
    branches: [ master ]
    paths: 
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'

# Permissions requises pour GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Éviter les déploiements concurrent
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job de build du frontend
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          # Variables d'environnement configurables via GitHub Secrets
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'https://ci-cd-ynov-back-lanzafame.vercel.app' }}
          SECRET_KEY: ${{ secrets.SECRET_KEY || 'secret' }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL || 'loise.fenoll@ynov.com' }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD || 'default-password' }}
          # Variables d'environnement pour le build
          NODE_ENV: production
          GENERATE_SOURCEMAP: false
          # Ne pas traiter les warnings ESLint comme des erreurs
          CI: false

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

  # Job de déploiement sur GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job de notification de succès
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "Frontend successfully deployed to GitHub Pages!"
            echo "URL: ${{ needs.deploy.outputs.page_url }}"
          else
            echo "Deployment failed!"
            exit 1
          fi
